name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release tag (e.g. v8-10.5.18)'
        required: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - runtime: v8
            version: 12.0.267.17
            os: ubuntu-20.04
            cc: gcc-8
            id: linux-x86_64
          - runtime: v8
            version: 12.0.267.17
            os: macos-latest
            cc: clang
            id: darwin-x86_64
    runs-on: ${{ matrix.os }}
    env:
      RETENTION_DAYS: 2
      # we use matrix.id because can't use runner.os and runner.arch in env
      TARGET_NAME: ${{ matrix.runtime }}-${{ matrix.version }}-${{ matrix.id }}
      PACKAGE_NAME: ngx_wasm_runtime-${{ matrix.runtime }}-${{ matrix.version }}-${{ matrix.id }}.tar.gz
    steps:
      - run: sudo apt-get update && sudo apt-get install -y gcc-8 libstdc++-8-dev
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.cc == 'gcc-8' }}

      - run: sudo apt-get install -y ninja-build cmake pkg-config python-is-python3
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.runtime == 'v8' }}

      - run: brew install ninja
        if: ${{ matrix.os == 'macos-latest' && matrix.runtime == 'v8' }}

      - run: brew install coreutils # for realpath
        if: ${{ matrix.os == 'macos-latest' }}

      - run: pip install setuptools
        if: ${{ matrix.os == 'macos-latest' && matrix.runtime == 'v8' }}

      - uses: actions/checkout@v2
        with:
          repository: kong/ngx_wasm_module
          ref: main

      - name: "Setup cache - rustup toolchain"
        uses: actions/cache@v4
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.rustup/settings.toml
            ~/.rustup/toolchains/*
            ~/.rustup/update-hashes/*
          key: rust-toolchain-${{ env.RUNNER_OS }}-${{ hashFiles('.github/**/*.yml', '.github/**/*.sh') }}-${{ github.sha }}

      - name: "Setup cache - build target dir"
        uses: actions/cache@v4
        if: ${{ !env.ACT }}
        with:
          path: |
            work/
          key: ${{ env.PACKAGE_NAME }}-work-${{ matrix.os }}-${{ matrix.cc }}-${{ hashFiles('util/**/*.sh', 'util/**/*.pl', 'util/**/*.awk', '.github/**/*.yml', '.github/**/*.sh', '.github/**/*.js', 'rust-toolchain') }}-${{ github.sha }}

      - name: "Setup Rust"
        uses: dtolnay/rust-toolchain@stable

      - name: Build Wasm runtime
        run: |
          mkdir -p work/${{ env.TARGET_NAME }}
          mkdir -p work/${{ env.TARGET_NAME }}/lib
          mkdir -p work/${{ env.TARGET_NAME }}/include
          export CC=${{ matrix.cc }}
          util/runtimes/${{ matrix.runtime }}.sh `realpath work/${{ env.TARGET_NAME }}`

      - name: Package Wasm runtime
        run: |
          mkdir -p dist
          cd work
          tar czvpf ../dist/${{ env.PACKAGE_NAME }} ${{ env.TARGET_NAME }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: release-artifacts-${{ matrix.os }}-${{ matrix.id }}
          path: dist
          retention-days: ${{ env.RETENTION_DAYS }}

      - id: assign-name
        run: |
          if [ "${{ github.event_name }}" = schedule ]; then
            echo "::set-output name=release_name::nightly-$(date -u +%Y%m%d)"
          else
            echo "::set-output name=release_name::${{ github.event.inputs.release_name }}"
          fi

  extract-arm:
    name: "Extract Ubuntu 22.04 (jammy) binary ARM from pre-built Docker image"
    runs-on: ubuntu-latest
    env:
      RETENTION_DAYS: 2
      VERSION: 12.0.267.17
      RUNTIME: v8
      OS: linux
      ARCH: arm64

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: shrink/actions-docker-extract@v2
        id: extract
        with:
          image: "ghcr.io/kong/ngx-wasm-runtimes:${{ env.RUNTIME }}-${{ env.VERSION }}-${{ env.OS }}-${{ env.ARCH }}"
          path: "/wasmx/dist/."
      - name: Upload binary
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: release-artifacts-${{ env.OS }}-${{ env.ARCH }}
          path: ${{ steps.extract.outputs.destination }}
          retention-days: ${{ env.RETENTION_DAYS }}

      - id: assign-name
        run: |
          if [ "${{ github.event_name }}" = schedule ]; then
            echo "::set-output name=release_name::nightly-$(date -u +%Y%m%d)"
          else
            echo "::set-output name=release_name::${{ github.event.inputs.release_name }}"
          fi

  upload-artifacts:
    if: ${{ github.event_name != 'pull_request' }}
    name: Upload release artifacts
    needs: [build, extract-arm]
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve sibling release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-artifacts-*
          merge-multiple: true

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ github.event_name == 'schedule' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: nightly
          prerelease: true
          title: ${{ needs.build.outputs.release_name }}
          files: |
            *.tar.gz

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ github.event.inputs.release_name }}
          prerelease: true
          title: ${{ github.event.inputs.release_name }}
          files: |
            *.tar.gz

      - uses: marvinpinto/action-automatic-releases@latest
        if: ${{ github.event_name == 'push' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Latest build"
          files: |
            *.tar.gz
